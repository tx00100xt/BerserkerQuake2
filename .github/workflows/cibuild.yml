name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build-alpine-x86:
    name: Alpine ${{ matrix.Configuration }} ${{ matrix.Platform }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        Configuration: [Release]
        Platform: [x86]

    steps:
    - uses: actions/checkout@v4

    - name: Install latest stable Alpine Linux
      uses: jirutka/setup-alpine@master
      with:
        arch: ${{ matrix.Platform }}
        branch: 'latest-stable'
        packages: build-base cmake xz sed sdl2-dev zlib-dev libogg-dev libvorbis-dev libjpeg-turbo-dev libpng-dev minizip-dev mesa-gl mesa-dev freeglut-dev

    - name: Get current date
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
         format: "YYYYMMDD"

    - name: Show current date
      run: |
        echo "${{ steps.date.outputs.time }}"

    - name: Run Prepare
      shell: alpine.sh {0}
      run: |
          cd ${{github.workspace}}
          mkdir x32 && mkdir x32/baseq2
          cd ${{github.workspace}}/Sources
          find . -name "CMakeLists.txt" -exec sed -i 's/-march=native/-mtune=generic/g' {} +

    - name: Run Build
      shell: alpine.sh {0}
      run: |
          cd ${{github.workspace}}/Sources
          cmake -B ${{github.workspace}}/Sources/build-x86 -DCMAKE_BUILD_TYPE=${{ matrix.Configuration }} -DCMAKE_C_FLAGS=-mmmx -DCMAKE_CXX_FLAGS=-mmmx
          cd ${{github.workspace}}/Sources/build-x86
          make -j$(nproc || echo 4)
          make install
          mv -f ${{github.workspace}}/berserkerq2 ${{github.workspace}}/x32
          mv -f ${{github.workspace}}/baseq2/libgame.so ${{github.workspace}}/x32/baseq2/libgame.so
    - name: Run make artifact
      shell: alpine.sh {0}
      run: |
          cd ${{github.workspace}}
          echo "*** Create archive ***"
          cd ${{github.workspace}}
          cp -fr README.md x32
          cp -fr LICENSE.md x32
          cp -fr modelist.txt x32
          cp -fr baseq2/purepaks.lst x32/baseq2
          cp -fr baseq2/default.cfg x32/baseq2
          tar -cJpvf berserkerq2-${{ steps.date.outputs.time }}-alpine-x86-bin.tar.xz x32

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: berserkerq2-${{ steps.date.outputs.time }}-alpine-x86-bin.tar.xz
        path: berserkerq2-${{ steps.date.outputs.time }}-alpine-x86-bin.tar.xz

  build-alpine-64:
    name: Alpine ${{ matrix.Configuration }} ${{ matrix.Platform }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        Configuration: [Release]
        Platform: [x86_64]

    steps:
    - uses: actions/checkout@v4

    - name: Install latest stable Alpine Linux
      uses: jirutka/setup-alpine@master
      with:
        arch: ${{ matrix.Platform }}
        branch: 'latest-stable'
        packages: build-base cmake bison flex nasm xz sed sdl2-dev zlib-dev libogg-dev libvorbis-dev libjpeg-turbo-dev libpng-dev minizip-dev mesa-gl mesa-dev freeglut-dev

    - name: Get current date
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
         format: "YYYYMMDD"

    - name: Show current date
      run: |
        echo "${{ steps.date.outputs.time }}"
 
    - name: Run Prepare
      shell: alpine.sh {0}
      run: |
          cd ${{github.workspace}}
          mkdir x64 && mkdir x64/baseq2
          cd ${{github.workspace}}/Sources
          find . -name "CMakeLists.txt" -exec sed -i 's/-march=native/-mtune=generic/g' {} +

    - name: Run Build
      shell: alpine.sh {0}
      run: |
          cd ${{github.workspace}}/Sources
          CFLAGS="-w" CXXFLAGS="-w" cmake -B ${{github.workspace}}/Sources/build-x64 -DCMAKE_BUILD_TYPE=${{ matrix.Configuration }}
          cd ${{github.workspace}}/Sources/build-x64
          make -j$(nproc || echo 4)
          make install
          mv -f ${{github.workspace}}/berserkerq2 ${{github.workspace}}/x64
          mv -f ${{github.workspace}}/baseq2/libgame.so ${{github.workspace}}/x64/baseq2

    - name: Run make artifact
      shell: alpine.sh {0}
      run: |
          cd ${{github.workspace}}
          echo "*** Create archive ***"
          cd ${{github.workspace}}
          cp -fr README.md x64
          cp -fr LICENSE.md x64
          cp -fr modelist.txt x64
          cp -fr baseq2/purepaks.lst x64/baseq2
          cp -fr baseq2/default.cfg x64/baseq2
          tar -cJpvf berserkerq2-${{ steps.date.outputs.time }}-alpine-x86_64-bin.tar.xz x64

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: berserkerq2-${{ steps.date.outputs.time }}-alpine-x86_64-bin.tar.xz
        path: berserkerq2-${{ steps.date.outputs.time }}-alpine-x86_64-bin.tar.xz

  build-ubuntu-x64:
    name: Ubuntu ${{ matrix.Configuration }} ${{ matrix.Platform }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        Configuration: [Release]
        Platform: [x64]

    steps:
    - uses: actions/checkout@v4

    - name: Install packages
      run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y libsdl2-dev libogg-dev libvorbis-dev &&
          sudo apt-get install -qq -y bison flex zlib1g-dev libxxhash-dev &&
          sudo apt-get install -qq -y libjpeg-dev libpng-dev minizip libminizip-dev

    - name: Get current date
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
         format: "YYYYMMDD"

    - name: Show current date
      run: |
        echo "${{ steps.date.outputs.time }}"
    - name: Prepare
      run: |
          cd ${{github.workspace}}
          find . -name "CMakeLists.txt" -exec sed -i 's/-march=native/-mtune=generic/g' {} +
          mkdir {x64,x64/baseq2}
    - name: Run Build
      run: |
          cd ${{github.workspace}}/Sources
          cmake -B ${{github.workspace}}/Sources/build-x64 -DCMAKE_BUILD_TYPE=${{ matrix.Configuration }}
          cd ${{github.workspace}}/Sources/build-x64
          make -j$(nproc || echo 4)
          make install
          mv -f ${{github.workspace}}/baseq2/libgame.so ${{github.workspace}}/x64/baseq2
          mv -f ${{github.workspace}}/berserkerq2 ${{github.workspace}}/x64

    - name: Run make  artifact
      run: |
          cd ${{github.workspace}}
          echo "*** Create archive ***"
          cd ${{github.workspace}}
          cp -fr README.md x64
          cp -fr LICENSE.md x64
          cp -fr modelist.txt x64
          cp -fr baseq2/purepaks.lst x64/baseq2
          cp -fr baseq2/default.cfg x64/baseq2
          tar -cJpvf berserkerq2-${{ steps.date.outputs.time }}-lnx-amd64-bin.tar.xz x64

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: berserkerq2-${{ steps.date.outputs.time }}-lnx-amd64-bin.tar.xz
        path: berserkerq2-${{ steps.date.outputs.time }}-lnx-amd64-bin.tar.xz

  build-freebsd-x64:
    name: FreeBSD ${{ matrix.Configuration }} ${{ matrix.Platform }}
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        Configuration: [Release]
        Platform: [x64]
    steps:
      - uses: actions/checkout@v4

      - name: Get current date
        id: date
        uses: Kaven-Universe/github-action-current-date-time@v1
        with:
          format: "YYYYMMDD"

      - name: Show current date
        run: |
          echo "${{ steps.date.outputs.time }}"

      - name: Build on FreeBSD
        uses: cross-platform-actions/action@v0.23.0
        with:
          operating_system: freebsd
          architecture: x86-64
          version: '13.1'
          shell: bash
          run: |
            uname -a
            sudo pkg install -y bison flex sdl2 libogg libvorbis zlib-ng cmake jpeg-turbo png minizip
            cd ${{github.workspace}}
            mkdir {x64,x64/baseq2}
            echo "*** Build ***"
            cd ${{github.workspace}}/Sources
            awk '{sub("-march=native","-mtune=generic")}1' CMakeLists.txt > CmakeTemp.txt && mv CmakeTemp.txt CMakeLists.txt
            cat CMakeLists.txt | grep mtune
            cat CMakeLists.txt | grep mtune
            cd ${{github.workspace}}/Sources
            cmake -B ${{github.workspace}}/Sources//build-x64 -DCMAKE_BUILD_TYPE=${{ matrix.Configuration }}
            cd ${{github.workspace}}/Sources/build-x64
            make -j$(sysctl -n hw.ncpu || echo 4)
            make install
            echo "*** Prepare Archive ***"
            cd ${{github.workspace}}
            mv -f ${{github.workspace}}/baseq2/libgame.so ${{github.workspace}}/x64/baseq2
            mv -f ${{github.workspace}}/berserkerq2 ${{github.workspace}}/x64
            mv -f ${{github.workspace}}/README.md ${{github.workspace}}/x64
            mv -f ${{github.workspace}}/LICENSE.md ${{github.workspace}}/x64
            cp -vfr {baseq2/purepaks.lst,baseq2/default.cfg} x64/baseq2
            echo "*** Create archive ***"
            XZ_DEFAULTS="-T 10" tar --use-compress-program=xz -cpvf berserkerq2-${{ steps.date.outputs.time }}-freebsd-amd64-bin.tar.xz x64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: berserkerq2-${{ steps.date.outputs.time }}-freebsd-amd64-bin.tar.xz
          path: berserkerq2-${{ steps.date.outputs.time }}-freebsd-amd64-bin.tar.xz
          
  build-raspios-armv7l:
    name: RPi OS Lite ${{ matrix.Configuration }} ${{ matrix.arch }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [armv7l]
        Configuration: [Release]
        include:
        - arch: armv7l
          cpu: cortex-a53
          base_image: raspios_lite:latest
          cpu_info: cpuinfo/raspberrypi_3b

    steps:
    - name: Get current date
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
         format: "YYYYMMDD"

    - name: Show current date
      run: |
        echo "${{ steps.date.outputs.time }}"

    - uses: pguyot/arm-runner-action@v2
      with:
        image_additional_mb: 2048
        base_image: ${{ matrix.base_image }}
        cpu: ${{ matrix.cpu }}
        cpu_info: ${{ matrix.cpu_info }}
        shell: /bin/bash 
        copy_artifact_path: Release
        commands: |
            mkdir Release
            test `uname -m` = ${{ matrix.arch }}
            grep Model /proc/cpuinfo
            apt-get update -y --allow-releaseinfo-change
            apt-get install --no-install-recommends -y git libjpeg-dev libpng-dev libminizip-dev cmake make gcc libc6-dev libsdl2-dev libogg-dev libvorbis-dev zlib1g-dev libvulkan1 libvulkan-dev    
            cat /proc/cpuinfo
            cat /etc/os-release
            mkdir {x32,x32/baseq2}
            uname -a
            gcc -c -Q -mcpu=native --help=target
            git clone https://github.com/tx00100xt/BerserkerQuake2.git
            echo "***build ***"
            cmake BerserkerQuake2/Sources -B BerserkerQuake2/Sources/build-armv7l -DCMAKE_BUILD_TYPE=${{ matrix.Configuration }} -DRPIOS=TRUE
            make -j4 -C BerserkerQuake2/Sources/build-armv7l
            make -C BerserkerQuake2/Sources/build-armv7l install
            mv -f BerserkerQuake2/baseq2/libgame.so x32/baseq2
            mv -f BerserkerQuake2/berserkerq2 x32
            echo "*** Copy Data files ***"
            cp -vfr BerserkerQuake2/{baseq2/purepaks.lst,baseq2/default.cfg} x32/baseq2
            cp -vfr BerserkerQuake2/{README.md,LICENSE.md,modelist.txt} x32
            echo "*** Create archive ***"
            mv x32 armv7l
            XZ_DEFAULTS="-T 10" tar --use-compress-program=xz -cpvf berserkerq2-${{ steps.date.outputs.time }}-rpios-armv7l-bin.tar.xz armv7l
            cp berserkerq2-${{ steps.date.outputs.time }}-rpios-armv7l-bin.tar.xz Release/

    - name: Prepare Release
      run: |
         sudo mv ${{github.workspace}}/Release/berserkerq2-${{ steps.date.outputs.time }}-rpios-armv7l-bin.tar.xz ${{github.workspace}}/

    - name: Upload Release
      uses: actions/upload-artifact@v4
      with:
        name: berserkerq2-${{ steps.date.outputs.time }}-rpios-armv7l-bin.tar.xz
        path: berserkerq2-${{ steps.date.outputs.time }}-rpios-armv7l-bin.tar.xz

  build-raspios-aarch64:
    name: RPi OS Lite ${{ matrix.Configuration }} ${{ matrix.arch }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [aarch64]
        Configuration: [Release]
        include:
        - arch: aarch64
          cpu: cortex-a72
          base_image: raspios_lite_arm64:latest
          cpu_info: cpuinfo/raspberrypi_4b

    steps:
    - name: Get current date
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
         format: "YYYYMMDD"

    - name: Show current date
      run: |
        echo "${{ steps.date.outputs.time }}"

    - uses: pguyot/arm-runner-action@v2
      with:
        image_additional_mb: 2048
        base_image: ${{ matrix.base_image }}
        cpu: ${{ matrix.cpu }}
        cpu_info: ${{ matrix.cpu_info }}
        shell: /bin/bash 
        copy_artifact_path: Release
        commands: |
            mkdir Release
            test `uname -m` = ${{ matrix.arch }}
            grep Model /proc/cpuinfo
            apt-get update -y --allow-releaseinfo-change
            apt-get install --no-install-recommends -y git libjpeg-dev libpng-dev libminizip-dev cmake make gcc libc6-dev libsdl2-dev libogg-dev libvorbis-dev zlib1g-dev libvulkan1 libvulkan-dev
            cat /proc/cpuinfo
            cat /etc/os-release
            mkdir {x64,x64/baseq2}
            uname -a
            gcc -c -Q -mcpu=native --help=target
            git clone https://github.com/tx00100xt/BerserkerQuake2.git
            echo "***build ***"
            cmake BerserkerQuake2/Sources -B BerserkerQuake2/Sources/build-aarch64 -DCMAKE_BUILD_TYPE=${{ matrix.Configuration }} -DRPIOS=TRUE
            make -j4 -C BerserkerQuake2/Sources/build-aarch64
            make -C BerserkerQuake2/Sources/build-aarch64 install
            mv -f BerserkerQuake2/baseq2/libgame.so x64/baseq2
            mv -f BerserkerQuake2/berserkerq2 x64
            echo "*** Copy Data files ***"
            cp -vfr BerserkerQuake2/{baseq2/purepaks.lst,baseq2/default.cfg} x64/baseq2
            cp -vfr BerserkerQuake2/{README.md,LICENSE.md,modelist.txt} x64
            echo "*** Create archive ***"
            mv x64 aarch64
            XZ_DEFAULTS="-T 10" tar --use-compress-program=xz -cpvf berserkerq2-${{ steps.date.outputs.time }}-rpios-aarch64-bin.tar.xz aarch64
            cp berserkerq2-${{ steps.date.outputs.time }}-rpios-aarch64-bin.tar.xz Release/

    - name: Prepare Release
      run: |
         sudo mv ${{github.workspace}}/Release/berserkerq2-${{ steps.date.outputs.time }}-rpios-aarch64-bin.tar.xz ${{github.workspace}}/

    - name: Upload Release
      uses: actions/upload-artifact@v4
      with:
        name: berserkerq2-${{ steps.date.outputs.time }}-rpios-aarch64-bin.tar.xz
        path: berserkerq2-${{ steps.date.outputs.time }}-rpios-aarch64-bin.tar.xz

  build-ubuntu-riscv64:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Ubuntu Release ${{ matrix.arch }}

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: riscv64
            distro: ubuntu22.04
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"
          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}
          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -qq -y
                apt-get install -qq -y git cmake build-essential xz-utils &&
                apt-get install -qq -y libsdl2-dev libogg-dev libvorbis-dev &&
                apt-get install -qq -y imagemagick bison flex zlib1g-dev libxxhash-dev &&
                apt-get install -qq -y libjpeg-dev libpng-dev libminizip-dev  
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac
          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd ${{github.workspace}}/Sources
            cmake -B ${{github.workspace}}/Sources/build -DCMAKE_BUILD_TYPE=Release
            cd ${{github.workspace}}/Sources/build
            make -j$(nproc || echo 4)
            make install
      - name: Get current date
        id: date
        uses: Kaven-Universe/github-action-current-date-time@v1
        with:
           format: "YYYYMMDD"

      - name: Show current date
        run: |
          echo "${{ steps.date.outputs.time }}"
      - name: Make artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
            cd ${{github.workspace}}
            mkdir riscv64 && cd riscv64
            mkdir baseq2
            cd ${{github.workspace}}
            mv -f ${{github.workspace}}/baseq2/libgame.so ${{github.workspace}}/riscv64/baseq2
            mv -f ${{github.workspace}}/berserkerq2 ${{github.workspace}}/riscv64
            echo "*** Copy Data files ***"
            cp -vfr {baseq2/purepaks.lst,baseq2/default.cfg} riscv64/baseq2
            cp -vfr {README.md,LICENSE.md,modelist.txt} riscv64
            echo "*** Create archive ***"
            tar -cJpvf berserkerq2-${{ steps.date.outputs.time }}-lnx-riscv64-bin.tar.xz riscv64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: berserkerq2-${{ steps.date.outputs.time }}-lnx-riscv64-bin.tar.xz
          path: berserkerq2-${{ steps.date.outputs.time }}-lnx-riscv64-bin.tar.xz

  build-ubuntu-ppc64le:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Ubuntu Release ${{ matrix.arch }}

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: ppc64le
            distro: ubuntu22.04
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"
          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}
          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -qq -y
                apt-get install -qq -y git cmake build-essential xz-utils &&
                apt-get install -qq -y libsdl2-dev libogg-dev libvorbis-dev &&
                apt-get install -qq -y imagemagick bison flex zlib1g-dev libxxhash-dev &&
                apt-get install -qq -y libjpeg-dev libpng-dev minizip libminizip-dev
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac
          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd ${{github.workspace}}/Sources
            cmake -B ${{github.workspace}}/Sources/build -DCMAKE_BUILD_TYPE=Release
            cd ${{github.workspace}}/Sources/build
            make -j$(nproc || echo 4)
            make install
      - name: Get current date
        id: date
        uses: Kaven-Universe/github-action-current-date-time@v1
        with:
           format: "YYYYMMDD"

      - name: Show current date
        run: |
          echo "${{ steps.date.outputs.time }}"
      - name: Make artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
            cd ${{github.workspace}}
            mkdir ppc64le && cd ppc64le
            mkdir baseq2
            cd ${{github.workspace}}
            mv -f ${{github.workspace}}/baseq2/libgame.so ${{github.workspace}}/ppc64le/baseq2
            mv -f ${{github.workspace}}/berserkerq2 ${{github.workspace}}/ppc64le
            echo "*** Copy Data files ***"
            cp -vfr {baseq2/purepaks.lst,baseq2/default.cfg} ppc64le/baseq2
            cp -vfr {README.md,LICENSE.md,modelist.txt} ppc64le
            echo "*** Create archive ***"
            tar -cJpvf berserkerq2-${{ steps.date.outputs.time }}-lnx-ppc64le-bin.tar.xz ppc64le

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: berserkerq2-${{ steps.date.outputs.time }}-lnx-ppc64le-bin.tar.xz
          path: berserkerq2-${{ steps.date.outputs.time }}-lnx-ppc64le-bin.tar.xz

  build-ubuntu-s390x:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Ubuntu Release ${{ matrix.arch }}

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: s390x
            distro: ubuntu22.04
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"
          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}
          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -qq -y
                apt-get install -qq -y git cmake build-essential xz-utils &&
                apt-get install -qq -y libsdl2-dev libogg-dev libvorbis-dev &&
                apt-get install -qq -y imagemagick bison flex zlib1g-dev libxxhash-dev &&
                apt-get install -qq -y libjpeg-dev libpng-dev minizip libminizip-dev
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac
          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd ${{github.workspace}}/Sources
            cmake -B ${{github.workspace}}/Sources/build -DCMAKE_BUILD_TYPE=Release
            cd ${{github.workspace}}/Sources/build
            make -j$(nproc || echo 4)
            make install
      - name: Get current date
        id: date
        uses: Kaven-Universe/github-action-current-date-time@v1
        with:
           format: "YYYYMMDD"

      - name: Show current date
        run: |
          echo "${{ steps.date.outputs.time }}"
      - name: Make artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
            cd ${{github.workspace}}
            mkdir s390x && cd s390x
            mkdir baseq2
            cd ${{github.workspace}}
            mv -f ${{github.workspace}}/baseq2/libgame.so ${{github.workspace}}/s390x/baseq2
            mv -f ${{github.workspace}}/berserkerq2 ${{github.workspace}}/s390x
            echo "*** Copy Data files ***"
            cp -vfr {baseq2/purepaks.lst,baseq2/default.cfg} s390x/baseq2
            cp -vfr {README.md,LICENSE.md,modelist.txt} s390x
            echo "*** Create archive ***"
            tar -cJpvf berserkerq2-${{ steps.date.outputs.time }}-lnx-s390x-bin.tar.xz s390x

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: berserkerq2-${{ steps.date.outputs.time }}-lnx-s390x-bin.tar.xz
          path: berserkerq2-${{ steps.date.outputs.time }}-lnx-s390x-bin.tar.xz

  build-linux-mipsel:
    name: Linux ${{ matrix.Configuration }} mipsel
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        Configuration: [Release]
        Platform: [x64]

    steps:
    - uses: actions/checkout@v4

    - name: Install nipsel image
      run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y xz-utils qemu qemu-user-static binfmt-support parted wget dosfstools zip
          sudo adduser $USER kvm
          echo "*** Download and install mipsel image ***"          
          wget -c http://nightly.altlinux.org/p9-mipsel/release/alt-p9-lxqt-20190703-mipsel.img.xz
          xz -d alt-p9-lxqt-20190703-mipsel.img.xz
          mkdir alt-mipsel && mkdir alt-image
          sudo losetup -f --show -o $((2048*512)) alt-p9-lxqt-20190703-mipsel.img
          sudo mount /dev/loop3 alt-image
          sudo cp -ax alt-image/* alt-mipsel
          echo "*** Remove mipsel image ***"  
          sudo umount alt-image
          sudo losetup -d /dev/loop3
          rm -f alt-p9-lxqt-20190703-mipsel.img
          rm -f alt-p9-lxqt-20190703-mipsel.img.xz
          echo "*** Install magic bytes ***"         
          cat > qemu-mipsel.conf << EOF
          :mipsel:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-mipsel-static:
          EOF
          echo "***  Create processor info ***"          
          sudo cp -vfr qemu-mipsel.conf /etc/binfmt.d/
          sudo sudo systemctl restart systemd-binfmt.service
          sudo cat /proc/sys/fs/binfmt_misc/mipsel
          echo "***  Create processor info ***"          
          cat > Baikal-T << EOF
          system type             : Baikal-T Generic SoC
          machine                 : Baikal-T1 BFK3 evaluation board
          processor               : 0
          cpu model               : MIPS P5600 V3.0  FPU V2.0
          BogoMIPS                : 1196.85
          wait instruction        : yes
          microsecond timers      : yes
          tlb_entries             : 576
          extra interrupt vector  : yes
          hardware watchpoint     : yes, count: 4, address/irw mask: [0x0ffc, 0x0ffc, 0x0ffb, 0x0ffb]
          isa                     : mips1 mips2 mips32r1 mips32r2
          ASEs implemented        : vz msa eva xpa
          shadow register sets    : 1
          kscratch registers      : 3
          package                 : 0
          core                    : 0
          VCED exceptions         : not available
          VCEI exceptions         : not available   
          EOF
          echo "***  Create mount script ***"          
          cat > alt-mipsel.sh << EOF
          sudo mount --bind /proc alt-mipsel/proc
          sudo mount --bind /sys alt-mipsel/sys
          sudo mount --bind /dev alt-mipsel/dev
          sudo mount --bind /dev/pts alt-mipsel/dev/pts
          sudo mount --bind Baikal-T /proc/cpuinfo          
          EOF
          echo "***  Copy qemu user static binaries to mipsel dir ***"          
          sudo cp -f /usr/bin/qemu-* alt-mipsel/usr/bin
          chmod +x alt-mipsel.sh
          cat > resolv.conf << EOF
          nameserver 8.8.8.8
          nameserver 8.8.4.4          
          EOF
          sudo cp -f resolv.conf alt-mipsel/etc
          sudo cp -f resolv.conf alt-mipsel/var/resolv/etc

    - name: Build
      run: |
          sudo sh alt-mipsel.sh
          sudo chroot alt-mipsel /bin/bash -e <<EOF
          uname -a
          cat /proc/cpuinfo
          apt-get update -qq
          apt-get install -qq -y git cmake gcc-c++ libSDL2-devel libogg-devel libstdc++-devel-static libvorbis-devel zlib-devel libjpeg-devel libpng-devel libminizip-ng-devel
          git clone https://github.com/tx00100xt/BerserkerQuake2.git berserkerq2
          git clone https://github.com/zlib-ng/minizip-ng.git
          cd minizip-ng && mkdir build
          cmake -B ${{github.workspace}}/minizip-ng/build
          cd ${{github.workspace}}/minizip-ng/build
          make -j4
          make install
          mkdir /berserkerq2/Sources/build
          cd /berserkerq2/Sources/build
          cmake ..
          make -j8
          make install
          exit
          EOF

    - name: Get current date
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
         format: "YYYYMMDD"

    - name: Show current date
      run: |
        echo "${{ steps.date.outputs.time }}"

    - name: Create Archive
      run: |
          cd ${{github.workspace}}
          mkdir {mipsel,mipsel/baseq2}
          sudo mv -f ${{github.workspace}}/alt-mipsel/berserkerq2/baseq2/libgame.so ${{github.workspace}}/mipsel/baseq2
          sudo mv -f ${{github.workspace}}/alt-mipsel/berserkerq2/berserkerq2 ${{github.workspace}}/mipsel
          sudo chown -R $USER:$USER mipsel
          echo "*** Create archive ***"
          cd ${{github.workspace}}
          cp -vfr {baseq2/purepaks.lst,baseq2/default.cfg} mipsel/baseq2
          cp -vfr {README.md,LICENSE.md,modelist.txt} mipsel
          tar -cJpvf berserkerq2-${{ steps.date.outputs.time }}-lnx-mipsel-bin.tar.xz mipsel

    - name: Free up resources
      run: |
          echo "***  Umount  ***" 
          sudo umount ${{github.workspace}}/alt-mipsel/proc/cpuinfo
          sudo umount ${{github.workspace}}/alt-mipsel/proc
          sudo umount ${{github.workspace}}/alt-mipsel/dev/pts
          sudo umount ${{github.workspace}}/alt-mipsel/dev
          sudo umount ${{github.workspace}}/alt-mipsel/sys
          echo "***  Remove mopsel image  ***"   
          sudo rm -fr ${{github.workspace}}/alt-mipsel

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: berserkerq2-${{ steps.date.outputs.time }}-lnx-mipsel-bin.tar.xz
        path: berserkerq2-${{ steps.date.outputs.time }}-lnx-mipsel-bin.tar.xz

  build-linux-loongarch64:
    name: Linux ${{ matrix.Configuration }} loongarch64
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        Configuration: [Release]
        Platform: [x64]

    steps:
    - uses: actions/checkout@v4

    - name: Install loongarch64 image
      run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y git xz-utils qemu qemu-user-static binfmt-support parted wget dosfstools zip p7zip-full squashfs-tools rpm2cpio
          sudo adduser $USER kvm
          echo "*** Download and install qemu-loongarch64-static ***"
          wget -c http://mirror.ghettoforge.org/distributions/gf/el/9/gf/x86_64/qemu-user-static-loongarch64-8.2.0-1.2.gf.el9.x86_64.rpm
          rpm2cpio qemu-user-static-loongarch64-8.2.0-1.2.gf.el9.x86_64.rpm | cpio -i --make-directories
          sudo cp -vfr usr/bin/qemu-loongarch64-static /usr/bin
          echo "*** Download and install loongarch64 image ***"
          echo Images 20240221 20231201
          wget -c http://get.srt.basealt.ru/ports/loongarch64/Sisyphus/images/loongarch64/regular-xfce-20240221-loongarch64.iso
          7z x '-i!live'  regular-xfce-20240221-loongarch64.iso
          sudo unsquashfs -d alt-loongarch64 live
          rm -f regular-xfce-20240221-loongarch64.iso
          rm -f live
          echo "*** Install magic bytes ***"         
          cat > qemu-loongarch64.conf << EOF
          :loongarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x01:\xff\xff\xff\xff\xff\xff\xff\xfc\x00\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-loongarch64-static:
          EOF
          echo "***  Create processor info ***"          
          sudo cp -vfr qemu-loongarch64.conf /etc/binfmt.d/
          sudo sudo systemctl restart systemd-binfmt.service
          sudo cat /proc/sys/fs/binfmt_misc/loongarch64
          echo "***  Create processor info ***"          
          cat > Loongson-3A5000 << EOF
          system type             : generic-loongson-machine
          processor               : 0
          package                 : 0
          core                    : 0
          cpu family              : Loongson-64bit
          model name              : Loongson-3A5000-HV
          CPU Revision            : 0x11
          FPU Revision            : 0x00
          CPU MHz                 : 2500.00
          BogoMIPS                : 5000.00
          TLB entries             : 2112
          Address sizes           : 48 bits physical, 48 bits virtual
          isa                     : loongarch32 loongarch64
          features                : cpucfg lam ual fpu lsx lasx complex crypto lvz lbt_x86 lbt_arm lbt_mips
          hardware watchpoint     : yes, iwatch count: 8, dwatch count: 8   
          EOF
          echo "***  Create mount script ***"          
          cat > alt-loongarch64.sh << EOF
          sudo mount --bind /proc alt-loongarch64/proc
          sudo mount --bind /sys alt-loongarch64/sys
          sudo mount --bind /dev alt-loongarch64/dev
          sudo mount --bind /dev/pts alt-loongarch64/dev/pts
          sudo mount --bind Loongson-3A5000 /proc/cpuinfo          
          EOF
          echo "***  Copy qemu user static binaries to loongarch64 dir ***"          
          sudo cp -vfr /usr/bin/qemu-* alt-loongarch64/usr/bin
          chmod +x alt-loongarch64.sh
          cat > resolv.conf << EOF
          nameserver 8.8.8.8
          nameserver 8.8.4.4          
          EOF
          sudo cp -f resolv.conf alt-loongarch64/etc
          sudo cp -f resolv.conf alt-loongarch64/var/resolv/etc

    - name: Build
      run: |
          sudo sh alt-loongarch64.sh
          sudo chroot alt-loongarch64 /bin/bash -e <<EOF
          uname -a
          cat /proc/cpuinfo
          apt-get update -qq
          apt-get install -qq -y git cmake gcc-c++ libSDL2 libSDL2-devel-static libSDL2-devel libogg-devel libstdc++-devel-static libvorbis-devel zlib-devel libjpeg-devel libpng-devel libminizip-ng-devel
          cp -vfr /usr/lib64/*SDL2* /usr/lib
          cp -vfr /usr/lib64/*libz.* /usr/lib
          git clone https://github.com/tx00100xt/BerserkerQuake2.git berserkerq2
          git clone https://github.com/zlib-ng/minizip-ng.git
          cd minizip-ng && mkdir build
          cmake -B ${{github.workspace}}/minizip-ng/build
          cd ${{github.workspace}}/minizip-ng/build
          make -j4
          make install
          mkdir /berserkerq2/Sources/build
          cd /berserkerq2/Sources/build
          cmake ..
          make -j8
          make install
          exit
          EOF

    - name: Get current date
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
         format: "YYYYMMDD"

    - name: Show current date
      run: |
        echo "${{ steps.date.outputs.time }}"

    - name: Create Archive
      run: |
          cd ${{github.workspace}}
          mkdir {loongarch64,loongarch64/baseq2}
          sudo mv -f ${{github.workspace}}/alt-loongarch64/berserkerq2/baseq2/libgame.so ${{github.workspace}}/loongarch64/baseq2
          sudo mv -f ${{github.workspace}}/alt-loongarch64/berserkerq2/berserkerq2 ${{github.workspace}}/loongarch64
          sudo chown -R $USER:$USER loongarch64
          echo "*** Create archive ***"
          cd ${{github.workspace}}
          cp -vfr {baseq2/purepaks.lst,baseq2/default.cfg} loongarch64/baseq2
          cp -vfr {README.md,LICENSE.md,modelist.txt} loongarch64
          tar -cJpvf berserkerq2-${{ steps.date.outputs.time }}-lnx-loongarch64-bin.tar.xz loongarch64

    - name: Free up resources
      run: |
          echo "***  Umount  ***" 
          sudo umount ${{github.workspace}}/alt-loongarch64/proc/cpuinfo
          sudo umount ${{github.workspace}}/alt-loongarch64/proc
          sudo umount ${{github.workspace}}/alt-loongarch64/dev/pts
          sudo umount ${{github.workspace}}/alt-loongarch64/dev
          sudo umount ${{github.workspace}}/alt-loongarch64/sys
          echo "***  Remove mopsel image  ***"   
          sudo rm -fr ${{github.workspace}}/alt-loongarch64

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: berserkerq2-${{ steps.date.outputs.time }}-lnx-loongarch64-bin.tar.xz
        path: berserkerq2-${{ steps.date.outputs.time }}-lnx-loongarch64-bin.tar.xz

  build-appimage-x64:
    name: Build AppImage ${{ matrix.Configuration }} ${{ matrix.Platform }}
    runs-on: ubuntu-22.04 # ubuntu-22.04 after 2025-04-01. The Ubuntu 20.04 Actions runner will be fully unsupported by 2025-04-01
    strategy:
      fail-fast: false
      matrix:
        Configuration: [Release]
        Platform: [x64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
        env: # Or as an environment variable
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: List keys5
        run: gpg -K

      - uses: actions/checkout@v4

      - name: Install packages
        run: |
          cd ${{github.workspace}}
          cp -axv Sources src
          sudo apt-get update -qq
          sudo apt-get install -qq -y libsdl2-dev libogg-dev libvorbis-dev libsdl2-image-dev &&
          sudo apt-get install -qq -y zlib1g-dev libglew-dev libjpeg-dev libpng-dev libminizip-dev zlib1g-dev
          echo Remove the echo after 2025-04-01. The Ubuntu 20.04 Actions runner will be fully unsupported by 2025-04-01
          sudo add-apt-repository universe
          sudo apt install libfuse2 
          
      - name: Get current date
        id: date
        uses: Kaven-Universe/github-action-current-date-time@v1
        with:
           format: "YYYYMMDD"

      - name: Show current date
        run: |
          echo "${{ steps.date.outputs.time }}"

      - name: Get linuxdeploy AppImage
        run: |
            wget -nv -c https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
            chmod +x linuxdeploy-x86_64.AppImage

      - name: Build sources
        run: |
            cd ${{github.workspace}}
            patch --verbose -p1 < AppImage/patches/0001-berserkerq2-AppImage.patch
            cd src
            make release
            make install.local

      - name: Copy compiling binaries 
        run: |
            cd ${{github.workspace}}/AppImage
            cp -axv App AppDir
            cp -r ../berserkerq2 ../AppImage/AppDir/usr/bin
            cp -r ../baseq2/libgame.so ../AppImage/AppDir/usr/bin/baseq2

      - name: Build AppImage
        run: |
            cd ${{github.workspace}}/AppImage
            wget -nv -c https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
            chmod +x linuxdeploy-x86_64.AppImage
            SIGN=1 ./linuxdeploy-x86_64.AppImage --executable AppDir/usr/bin/berserkerq2 --desktop-file AppDir/usr/share/applications/io.github.tx00100xt.BerserkerQuake2.desktop --icon-file AppDir/usr/share/icons/hicolor/128x128/apps/berserkerq2.png --appdir AppDir --output appimage
            mv -f  ${{github.workspace}}/AppImage/BerserkerQuake2-x86_64.AppImage  ${{github.workspace}}/BerserkerQuake2-${{ steps.date.outputs.time }}-1.45.1-x86_64.AppImage

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: BerserkerQuake2-${{ steps.date.outputs.time }}-1.45.1-x86_64.AppImage
          path: BerserkerQuake2-${{ steps.date.outputs.time }}-1.45.1-x86_64.AppImage
